#include "dlprod_fclbase_analyzers.fcl"
#include "reco_uboone_mcc8_driver_common.fcl"

process_name: McRecoStage1CV

services.TFileService.fileName: "reco_stage_1_hist.root"
services.BackTracker:  @local::microboone_backtracker

# Add larcv required services.
services.LLMetaMaker: {Enable: false}
services.LArCVMetaMaker: {Enable: false}

#Add in the larcv bits...
physics.analyzers:
{
  @table::physics.analyzers
  @table::dlprod_analyzers
}
physics.filters:
{ 
  @table::physics.filters
  dlpmtprecuts: @local::microboone_dlpmtprecuts
}
physics.filters.dlpmtprecuts.OpHitProducer: "ophitBeam"
physics.dlfilter: [ @sequence::microboone_reco_mcc8_stage1, dlpmtprecuts ]
physics.larcv: [ reco2d, opreco, mcinfo, superaWholeViewMC, superaMCTruthOnly ]
physics.analyzers.superaMCTruthOnly.out_filename: "larcv_mctruth.root"

physics.reco: [ @sequence::microboone_reco_mcc8_stage1 ]
physics.trigger_paths: [ reco , dlfilter ]

physics.end_paths: [ @sequence::physics.end_paths, larcv ]

outputs.out1.fileName: "%ifb_%tc_reco1_CV.root"
outputs.out1.dataTier: "reconstructed-2d"
source.inputCommands: ["keep *_*_*_*", "drop *_*_*_McReco*", "drop sumdata::RunData_*_*_*" ]

# setup filter for larcv parts
physics.analyzers.reco2d.SelectEvents:  [ dlfilter ]
physics.analyzers.opreco.SelectEvents:  [ dlfilter ]
physics.analyzers.mcinfo.SelectEvents:  [ dlfilter ]
physics.analyzers.superaWholeViewMC.SelectEvents:  [ dlfilter ]
physics.analyzers.superaMCTruthOnly.SelectEvents:  [ dlfilter ]

services.DetectorPropertiesService.NumberTimeSamples: 6400
services.DetectorPropertiesService.ReadOutWindowSize: 6400
services.DetectorClocksService.InheritClockConfig:    false
services.DetectorClocksService.TriggerOffsetTPC:      -400


# Configuration for TFileMetadataMicroBooNE service.
microboone_tfile_metadata:
{
  JSONFileName:[ "ana_hist.root.json", 
                 "larlite_reco2d.root.json",
                 "larlite_opreco.root.json",
                 "larlite_mcinfo.root.json",
                 "larcv.root.json", 
                 "larcv_mctruth.root.json" ]
  GenerateTFileMetadata: [ true, true, true, true, true, true ]
  dataTier:              [ "root-tuple", "larlite", "larlite", "larlite", "larcv", "larcv" ]
  fileFormat:            [ "root", "root", "root", "root", "root", "root" ]
}
